#!/bin/bash

# Version number
VERSION="1.0.4"

# Configuration Directories and Paths
ROOT_CONFIG_DIR="$HOME/.config"
CONFIG_DIR="$HOME/.config/theme-switch"
THEME_CONF="$CONFIG_DIR/theme.conf"

# Default Paths to theme files (these will be overridden if specified in the config file)
NVIM_THEME="$ROOT_CONFIG_DIR/nvim/lua/config/theme.lua"
VIM_THEME="$HOME/.vim/theme.vim"
KITTY_THEME="$ROOT_CONFIG_DIR/kitty/theme.conf"

# Paths to template files
NVIM_DARK_TEMPLATE="$CONFIG_DIR/templates/nvim-dark"
NVIM_LIGHT_TEMPLATE="$CONFIG_DIR/templates/nvim-light"
VIM_DARK_TEMPLATE="$CONFIG_DIR/templates/vim-dark"
VIM_LIGHT_TEMPLATE="$CONFIG_DIR/templates/vim-light"
KITTY_DARK_TEMPLATE="$CONFIG_DIR/templates/kitty-dark"
KITTY_LIGHT_TEMPLATE="$CONFIG_DIR/templates/kitty-light"

# Load configuration from theme.conf if it exists
load_config() {
	if [ -f "$THEME_CONF" ]; then
		source "$THEME_CONF"
	else
		echo "Configuration file $THEME_CONF not found, using default settings."
	fi
}

# Function to set the dark theme
set_dark_theme() {
	if [ "${set_nvim_theme:-true}" = "true" ]; then
		cp "$NVIM_DARK_TEMPLATE" "$NVIM_THEME"
		echo "Applied dark theme to Neovim."
	fi

	if [ "${set_vim_theme:-true}" = "true" ]; then
		cp "$VIM_DARK_TEMPLATE" "$VIM_THEME"
		echo "Applied dark theme to Vim."
	fi

	if [ "${set_kitty_theme:-true}" = "true" ]; then
		cp "$KITTY_DARK_TEMPLATE" "$KITTY_THEME"
		echo "Applied dark theme to Kitty."
	fi

	echo "current_theme=dark" >"$THEME_CONF"
	echo "Switched to dark theme."
}

# Function to set the light theme
set_light_theme() {
	if [ "${set_nvim_theme:-true}" = "true" ]; then
		cp "$NVIM_LIGHT_TEMPLATE" "$NVIM_THEME"
		echo "Applied light theme to Neovim."
	fi

	if [ "${set_vim_theme:-true}" = "true" ]; then
		cp "$VIM_LIGHT_TEMPLATE" "$VIM_THEME"
		echo "Applied light theme to Vim."
	fi

	if [ "${set_kitty_theme:-true}" = "true" ]; then
		cp "$KITTY_LIGHT_TEMPLATE" "$KITTY_THEME"
		echo "Applied light theme to Kitty."
	fi

	echo "current_theme=light" >"$THEME_CONF"
	echo "Switched to light theme."
}

# Function to toggle the theme based on the current setting
toggle_theme() {
	load_config
	if [ "$current_theme" = "dark" ]; then
		set_light_theme
	else
		set_dark_theme
	fi
}

# Function to set a specific theme with a colorscheme
set_theme() {
	theme="$1"
	program="$2"
	colorscheme="$3"

	case "$program" in
	--vim)
		template_file="$CONFIG_DIR/templates/vim-$theme"
		output_file="$VIM_THEME"
		sed -i "s/^colorscheme .*/colorscheme $colorscheme/" "$template_file"
		;;
	--nvim)
		template_file="$CONFIG_DIR/templates/nvim-$theme"
		output_file="$NVIM_THEME"
		sed -i "s|^vim\.cmd\.colorscheme(.*)|vim.cmd.colorscheme(\"$colorscheme\")|" "$template_file"
		;;
	--kitty)
		template_file="$CONFIG_DIR/templates/kitty-$theme"
		output_file="$KITTY_THEME"
		sed -i "s|^include ./themes/.*|include ./themes/$colorscheme.conf|" "$template_file"
		;;
	*)
		echo "Error: Unsupported program '$program'. Use '--vim', '--nvim', or '--kitty'."
		exit 1
		;;
	esac

	cp "$template_file" "$output_file"
	echo "Applied $theme theme with colorscheme '$colorscheme' to $program."
	echo "current_theme=$theme" >"$THEME_CONF"
}

# Display the version information
show_version() {
	echo "Theme Switcher Script, Version $VERSION"
}

# Main Logic: Parse Command-Line Arguments
case "$1" in
-v | --version)
	show_version
	;;
-t | --toggle)
	toggle_theme
	;;
-s | --set)
	# Ensure the required arguments for -s/--set are provided
	if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
		echo "Usage: $0 -s <light|dark> --<vim|nvim|kitty> <colorscheme>"
		exit 1
	fi
	set_theme "$2" "$3" "$4"
	;;
*)
	echo "Usage: $0 [option]"
	echo "Options:"
	echo "  -v, --version         Show the version number"
	echo "  -t, --toggle          Toggle between dark and light themes"
	echo "  -s, --set <theme>     Set a specific theme and colorscheme for a program"
	echo "                        Example: $0 -s dark --nvim gruvbox"
	;;
esac
