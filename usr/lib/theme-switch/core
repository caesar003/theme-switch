#!/bin/bash

# /usr/lib/theme-switch/core

checkUserConfig() {
	if [ ! -d "$CONFIG_DIR" ]; then
		echo "--------------------------------------------------------------------------------"
		echo "Checking user config..."
		echo "--------------------------------------------------------------------------------"
		echo "Configuration directory '$CONFIG_DIR' not found."
		echo "Would you like to create it now? (Y/n): "
		read -r create_config

		if [[ "$create_config" =~ ^[Yy]$ ]]; then
			initialize_config
		else
			echo "Exiting..."
			exit 1
		fi
	fi

	for template in "$NVIM_DARK_TEMPLATE" "$NVIM_LIGHT_TEMPLATE" "$VIM_DARK_TEMPLATE" "$VIM_LIGHT_TEMPLATE" "$KITTY_DARK_TEMPLATE" "$KITTY_LIGHT_TEMPLATE"; do
		if [ ! -f "$template" ]; then
			echo "Error: Template file '$template' not found."
			echo "Please create the missing template files."
			exit 1
		fi
	done
}

listThemes() {
	local program="$1"
	local theme_dir
	local extension

	case "$program" in
	vim | nvim)
		theme_dir="$VIM_THEME_DIR"
		extension=".vim"
		;;
	kitty)
		theme_dir="$KITTY_THEME_DIR"
		extension=".conf"
		;;
	*)
		echo "Error: Unsupported program '$program'. Use 'vim', 'nvim', or 'kitty'."
		exit 1
		;;
	esac

	if [ ! -d "$theme_dir" ]; then
		echo "Error: Theme directory '$theme_dir' not found."
		exit 1
	fi

	# List themes, remove extensions, format into one line, wrap text, and show in less
	find "$theme_dir" -type f -name "*$extension" -printf "%f\n" | sed "s/$extension$//" | paste -sd " " - | fold -s | less -R
}

loadConfig() {
	if [ -f "$THEME_CONFIG_FILE" ]; then
		source "$THEME_CONFIG_FILE"
	else
		echo "Configuration file $THEME_CONFIG_FILE not found, using default settings."
	fi
}

showDetails() {
	loadConfig
	local vim_colorscheme
	local nvim_colorscheme
	local kitty_theme

	vim_colorscheme=$(grep -oP '^colorscheme\s+\K.*' "$VIM_THEME_FILE" | head -n 1)
	nvim_colorscheme=$(grep -oP 'vim\.cmd.colorscheme\("\K[^"]+' "$NVIM_THEME_FILE" | head -n 1)
	kitty_theme=$(grep -oP 'include ./themes/\K[^.]*' "$KITTY_THEME_FILE" | head -n 1)
	kitty_opacity=$(grep -oP '^background_opacity\s+\K.*' "$KITTY_THEME_FILE" | head -n 1)

	echo "Current theme: $current_theme"
	echo "Vim colorscheme: ${vim_colorscheme:-Not set}"
	echo "Neovim colorscheme: ${nvim_colorscheme:-Not set}"
	echo "Kitty theme: ${kitty_theme:-Not set}"
	echo "Kitty opacity: ${kitty_opacity:-Not set}"
}

setTheme() {
	local theme_type="$1"
	local action="$2"

	if [ "$theme_type" = "dark" ]; then
		NVIM_TEMPLATE="$NVIM_DARK_TEMPLATE"
		VIM_TEMPLATE="$VIM_DARK_TEMPLATE"
		KITTY_TEMPLATE="$KITTY_DARK_TEMPLATE"
	else
		NVIM_TEMPLATE="$NVIM_LIGHT_TEMPLATE"
		VIM_TEMPLATE="$VIM_LIGHT_TEMPLATE"
		KITTY_TEMPLATE="$KITTY_LIGHT_TEMPLATE"
	fi

	if [ "${set_nvim_theme:-true}" = "true" ]; then
		cp "$NVIM_TEMPLATE" "$NVIM_THEME_FILE"
		echo "Applied $theme_type theme to Neovim."
	fi

	if [ "${set_vim_theme:-true}" = "true" ]; then
		cp "$VIM_TEMPLATE" "$VIM_THEME_FILE"
		echo "Applied $theme_type theme to Vim."
	fi

	if [ "${set_kitty_theme:-true}" = "true" ]; then
		cp "$KITTY_TEMPLATE" "$KITTY_THEME_FILE"
		echo "Applied $theme_type theme to Kitty."
	fi

	sed -i "s/^current_theme=.*/current_theme=$theme_type/" "$THEME_CONFIG_FILE"

	# Attempt to reload Kitty's configuration
	if ! kitty @ load-config; then
		echo "Warning: Failed to reload Kitty configuration. Ensure Kitty is running."
	fi

	echo "$action $theme_type theme."
}

toggleTheme() {
	checkUserConfig
	loadConfig

	# Proceed to toggle the theme if all checks passed
	if [ "$current_theme" = "dark" ]; then
		setTheme "light" "Switched to"
	else
		setTheme "dark" "Switched to"
	fi
}

reloadTheme() {
	checkUserConfig
	loadConfig

	# Proceed to toggle the theme if all checks passed
	if [ "$current_theme" = "dark" ]; then
		setTheme "dark" "Reloaded"
	else
		setTheme "light" "Reloaded"
	fi
}

setTemplate() {
	checkUserConfig
	local theme="$1"
	local program="$2"
	local colorscheme="$3"

	case "$program" in
	vim)
		template_file="$CONFIG_DIR/templates/vim-$theme"
		output_file="$VIM_THEME_FILE"
		sed -i "s/^colorscheme .*/colorscheme $colorscheme/" "$template_file"
		;;
	nvim)
		template_file="$CONFIG_DIR/templates/nvim-$theme"
		output_file="$NVIM_THEME_FILE"
		sed -i "s|^vim\.cmd\.colorscheme(.*)|vim.cmd.colorscheme(\"$colorscheme\")|" "$template_file"
		;;
	kitty)
		template_file="$CONFIG_DIR/templates/kitty-$theme"
		output_file="$KITTY_THEME_FILE"
		sed -i "s|^include ./themes/.*|include ./themes/$colorscheme.conf|" "$template_file"
		;;
	*)
		echo "Error: Unsupported program '$program'. Use 'vim', 'nvim', or 'kitty'."
		exit 1
		;;
	esac

	cp "$template_file" "$output_file"
	echo "Applied $theme theme with colorscheme '$colorscheme' to $program template."

	sed -i "s/^current_theme=.*/current_theme=$theme/" "$THEME_CONFIG_FILE"
}

showVersion() {
	echo "Theme Switcher Script, Version $VERSION"
}

setOpacity() {
	if [[ ! "$1" =~ ^[0-1](\.[0-9]{1,2})?$ ]] || (($(echo "$1 < 0.00" | bc -l) || $(echo "$1 > 1.00" | bc -l))); then
		echo "Error: Opacity must be a number between 0.00 and 1.00"
		return 1
	fi

	if [[ "$2" != "dark" && "$2" != "light" ]]; then
		echo "Error: Theme must be either 'dark' or 'light'"
		return 1
	fi

	KITTY_TEMPLATE_FILE="$TEMPLATE_DIR/kitty-$2"

	local opacity=$1
	local theme=$2
	sed -i "s/^background_opacity .*/background_opacity $opacity/" "$KITTY_TEMPLATE_FILE"
	echo "Setting opacity of $opacity to $KITTY_TEMPLATE_FILE"
}

printHelp() {
	script_name=$(basename "$0")
	echo "Usage: $script_name [option]"
	echo "Options:"
	echo "  -v, --version                              Show the version number"
	echo "  -t, --toggle                               Toggle between dark and light themes"
	echo "  -r, --reload                               Reload the config after template changes"
	echo "  -s, --set <theme> <program> <colorscheme>  Set a specific theme and colorscheme for a program"
	echo "                                             Example: $script_name -s dark nvim gruvbox"
	echo "  -o, --opacity <opacity> <theme>            Set Kitty Opacity for specific theme"
	echo "                                             Example: $script_name -o 0.90 dark"
	echo "  -d, --detail                               Show current theme details"
}
