#!/bin/bash
# /usr/lib/theme-switch/init

declare -A vim_dark_themes
vim_dark_themes=(
	["1"]="gruvbox"
	["2"]="tokyonight"
	["3"]="rosepine"
	["4"]="catppuccin_mocha"
	["5"]="monokai"
)

declare -A vim_dark_themes_display
vim_dark_themes_display=(
	["1"]="Gruvbox (default)"
	["2"]="Tokyonight"
	["3"]="Rosé Pine"
	["4"]="Catppuccin"
	["5"]="Monokai"
)

declare -A vim_light_themes
vim_light_themes=(
	["1"]="paper"
	["2"]="tokyonight"
	["3"]="rosepine"
	["4"]="catppuccin_latte"
	["5"]="material"
)

declare -A vim_light_themes_display
vim_light_themes_display=(
	["1"]="Paper (default)"
	["2"]="Rosé Pine"
	["3"]="Catppuccin"
	["4"]="Gruvbox"
	["5"]="Material"
)

declare -A kitty_dark_themes
kitty_dark_themes=(
	["1"]="adwaita_dark"
	["2"]="Atom"
	["3"]="Catppuccin-Mocha"
	["4"]="gruvbox-dark"
	["5"]="rose-pine-moon"
)

declare -A kitty_light_themes
kitty_light_themes=(
	["1"]="adwaita_light"
	["2"]="AtomOneLight"
	["3"]="Catppuccin-Latte"
	["4"]="gruvbox-light"
	["5"]="rose-pine-dawn"
)

declare -A kitty_dark_themes_display
kitty_dark_themes_display=(
	["1"]="Adwaita Dark (default)"
	["2"]="Atom"
	["3"]="Catppuccin Mocha"
	["4"]="Gruvbox Dark"
	["5"]="Rosé Pine Moon"
)

declare -A kitty_light_themes_display
kitty_light_themes_display=(
	["1"]="Adwaita Light (default)"
	["2"]="Atom One Light"
	["3"]="Catppuccin Latte"
	["4"]="Gruvbox Light"
	["5"]="Rosé Pine Dawn"
)

clone_repo() {
	local id=$1
	local theme=$2
	local repo=$3

	# Clone the repository into the temporary directory
	git clone "$repo" "$TEMP_DIR/$id" || {
		echo "Failed to clone $repo"
		return 1
	}

	# Handle themes based on type
	if [[ "$theme" == "kitty" ]]; then
		cp -r "$TEMP_DIR/$id/themes/"* "$KITTY_THEME_DIR"
	elif [[ "$theme" == "vim" ]]; then
		cp -r "$TEMP_DIR/$id/colors/"* "$VIM_THEME_DIR"
	else
		echo "Unknown theme type: $theme"
		return 1
	fi
}

clone_theme() {

	mkdir -p "$VIM_THEME_DIR" "$KITTY_THEME_DIR"
	# Read each entry in repo-list.json
	jq -c '.[]' "$REPO_LIST" | while read -r entry; do
		# Parse JSON values
		local id=$(echo "$entry" | jq -r '.id')
		local theme=$(echo "$entry" | jq -r '.theme')
		local repo=$(echo "$entry" | jq -r '.repo')

		# Clone and copy themes
		clone_repo "$id" "$theme" "$repo"
	done

	# Remove conflicting directories if they exist and create symbolic links
	[ -d "$VIM_CONFIG_DIR/colors" ] && rm -rf "$VIM_CONFIG_DIR/colors"
	ln -sf "$VIM_THEME_DIR" "$VIM_CONFIG_DIR/colors"

	[ -d "$NVIM_CONFIG_DIR/colors" ] && rm -rf "$NVIM_CONFIG_DIR/colors"
	ln -sf "$VIM_THEME_DIR" "$NVIM_CONFIG_DIR/colors"

	[ -d "$KITTY_CONFIG_DIR/themes" ] && rm -rf "$KITTY_CONFIG_DIR/themes"
	ln -sf "$KITTY_THEME_DIR" "$KITTY_CONFIG_DIR/themes"

	# Cleanup temporary directory
	rm -rf "$TEMP_DIR"
	echo "Themes installed and linked successfully."

	# Cleanup broken themes listed in issues.txt
	if [ -f "$ISSUES_FILE" ]; then
		while read -r theme_file; do
			local target_file="$VIM_THEME_DIR/$theme_file"
			if [ -f "$target_file" ]; then
				rm "$target_file"
				echo "Removed broken theme: $theme_file"
			fi
		done <"$ISSUES_FILE"
	else
		echo "No $ISSUES_FILE file found, skipping broken themes removal."
	fi
}

generate_config() {
	clone_theme
	read -p "Your default theme? light/dark (default dark): " user_theme
	local selected_theme="${user_theme:-dark}"

	read -p "Are you using Vim? y/n (default yes): " use_vim
	local set_vim_theme=true
	if [[ "$use_vim" =~ ^(n|N) ]]; then
		set_vim_theme=false
	fi

	read -p "Are you using Kitty? y/n (default yes): " use_kitty
	local set_kitty_theme=true
	if [[ "$use_kitty" =~ ^(n|N) ]]; then
		set_kitty_theme=false
	fi

	read -p "Are you using Neovim? y/n (default yes): " use_nvim
	local set_nvim_theme=true
	if [[ "$use_nvim" =~ ^(n|N) ]]; then
		set_nvim_theme=false
	fi

	read -p "Path to Neovim theme file (default $NVIM_THEME_FILE): " nvim_theme
	local nvim_theme="${nvim_theme:-$NVIM_THEME_FILE}"

	read -p "Path to Vim theme file (default $VIM_THEME_FILE): " vim_theme
	local vim_theme="${vim_theme:-$VIM_THEME_FILE}"

	read -p "Path to Kitty theme file (default $KITTY_THEME_FILE): " kitty_theme
	local kitty_theme="${kitty_theme:-$KITTY_THEME_FILE}"

	cat <<EOL >"$THEME_CONFIG_FILE"
current_theme=$selected_theme

set_kitty_theme=$set_kitty_theme
set_nvim_theme=$set_nvim_theme
set_vim_theme=$set_vim_theme

nvim_theme=$nvim_theme
vim_theme=$vim_theme
kitty_theme=$kitty_theme
EOL

}

show_prompt() {
	local -n themes=$1
	for key in "${!themes[@]}"; do
		echo -e "\t$key) ${themes[$key]}"
	done
	echo ""
}

select_theme() {
	local -n themes=$1
	local default_choice=$2

	read -p "Pick the number or press enter to accept default ($default_choice): " local choice
	choice="${choice:-$default_choice}"

	echo "${themes[$choice]}"
}

initialize_config() {
	mkdir -p "$TEMPLATE_DIR"
	generate_config

	echo ""
	echo "Choose Kitty Dark Theme (you can change this later):"
	show_prompt kitty_dark_themes_display
	local kitty_dark_theme_name=$(select_theme kitty_dark_themes "1")

	echo ""
	echo "Choose Kitty Light Theme (you can change this later):"
	show_prompt kitty_light_themes_display
	local kitty_light_theme_name=$(select_theme kitty_light_themes "1")

	echo ""
	echo "Choose Vim Dark Theme (you can change this later):"
	show_prompt vim_dark_themes_display
	local vim_dark_theme_name=$(select_theme vim_dark_themes "1")

	echo ""
	echo "Choose Vim Light Theme (you can change this later):"
	show_prompt vim_light_themes_display
	vim_light_theme_name=$(select_theme vim_light_themes "1")

	echo ""
	echo "Choose Neovim Dark Theme (you can change this later):"
	show_prompt vim_dark_themes_display
	nvim_dark_theme_name=$(select_theme vim_dark_themes "1")

	echo ""
	echo "Choose Neovim Light Theme (you can change this later):"
	show_prompt vim_light_themes_display
	nvim_light_theme_name=$(select_theme vim_light_themes "1")

	cat <<EOL >"$KITTY_DARK_TEMPLATE"
include ./themes/$kitty_dark_theme_name.conf
background_opacity 1.00
EOL

	cat <<EOL >"$KITTY_LIGHT_TEMPLATE"
include ./themes/$kitty_light_theme_name.conf
background_opacity 1.00
EOL

	cat <<EOL >"$VIM_DARK_TEMPLATE"
set background=dark
colorscheme $vim_dark_theme_name
EOL

	cat <<EOL >"$VIM_LIGHT_TEMPLATE"
set background=light
colorscheme $vim_light_theme_name
EOL

	cat <<EOL >"$NVIM_DARK_TEMPLATE"
vim.cmd.colorscheme("$nvim_dark_theme_name")
vim.opt.background = "dark"
EOL

	cat <<EOL >"$NVIM_LIGHT_TEMPLATE"
vim.cmd.colorscheme("$nvim_light_theme_name")
vim.opt.background = "light"
EOL

	echo "Configuration written to $THEME_CONFIG_FILE, kitty-dark, kitty-light, vim-dark, vim-light, nvim-dark, and nvim-light with the following settings:"

	echo -e "\tTheme: $selected_theme"
	echo -e "\tset_kitty_theme: $set_kitty_theme"
	echo -e "\tset_nvim_theme: $set_nvim_theme"
	echo -e "\tset_vim_theme: $set_vim_theme"
	echo -e "\tnvim_theme path: $nvim_theme"
	echo -e "\tvim_theme path: $vim_theme"
	echo -e "\tkitty_theme path: $kitty_theme"
	echo -e "\tKitty dark theme: $kitty_dark_theme_name"
	echo -e "\tKitty light theme: $kitty_light_theme_name"
	echo -e "\tVim dark theme: $vim_dark_theme_name"
	echo -e "\tVim light theme: $vim_light_theme_name"
	echo -e "\tNeovim dark theme: $nvim_dark_theme_name"
	echo -e "\tNeovim light theme: $nvim_light_theme_name"
}
